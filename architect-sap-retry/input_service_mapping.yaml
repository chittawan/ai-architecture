# SAP Retry Process - Service Mapping Template
# Generated by sa_004 Phase 1: Template Generation from BPMN Analysis
# Please review and select technology options where indicated

**output-location : /{this}/*

# Process metadata
process:
  name: SAP Retry Process Flow
  description: Distributed retry mechanism for failed service requests / ‡∏£‡∏∞‡∏ö‡∏ö retry ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö service request ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß

# Technology Stack Configuration (Please select from options)
tech_stack:
  # Choose your preferred technology stack
  backend_framework: ".NET"
  frontend_framework: "Angular"
  database_primary: "MongoDB"
  message_queue: "Kafka"
  cache: "Redis"
  
  # Infrastructure & DevOps
  api_gateway: "Kong"
  monitoring: "Prometheus"
  logging: "Loki"
  deployment: "Kubernetes"

# Service Mapping Configuration (Auto-generated from BPMN roles)
service_mapping:
  # Services identified from BPMN roles (type="lane")
  services:
    - name: Retry Receiver Service
      technology: ".NET API"
      port: 8081
      description: "‡∏£‡∏±‡∏ö Request ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Retry"
      responsibility: "Receiver-Request"
      activities: [act2]  # Retry-Receiver-Service
      api_endpoints: 
        - "/api/v1/retry"
        - "/api/v1/status"
      database_access: [retry_requests]
      
    - name: Retry Scheduler Service
      technology: ".NET API + Hangfire"
      port: 8082
      description: "Scheduler-Job, GetList-Retry-Request, update-retry-request, produce-retry-request"
      responsibility: "produce-retry-request"
      activities: [act3]  # Retry-Scheduler-Service
      api_endpoints:
        - "/api/v1/schedule"
        - "/api/v1/config"
      database_access: [retry_schedules, retry_config]
      
    - name: Retry Worker Service
      technology: ".NET API"
      port: 8083
      description: "retry-request, produce-retry-request_and_response"
      responsibility: "call retry, retry-request and response"
      activities: [act4]  # Retry-Worker-Service
      api_endpoints:
        - "/api/v1/process"
        - "/api/v1/health"
      database_access: [retry_attempts, retry_results]
      
    - name: Retry Result Service
      technology: ".NET API"
      port: 8084
      description: "result-retry-request"
      responsibility: "result processing and reporting"
      activities: [act6]  # Retry-Result-Service
      api_endpoints:
        - "/api/v1/results"
        - "/api/v1/reports"
      database_access: [retry_results, audit_logs]
      
  # Database configuration (auto-suggested based on services)
  databases:
    - name: Main Database
      type: "MongoDB"
      purpose: Primary retry data storage
      collections_tables: [retry_requests, retry_schedules, retry_attempts, retry_results, retry_config, audit_logs]
      
    - name: Cache Layer
      type: "Redis"
      purpose: Performance optimization and rate limiting
      data_types: [retry_config, rate_limits, temp_results, session_data]
      
    - name: Message Queue
      type: "Apache Kafka"
      purpose: Async communication between services
      topics_queues: [retry_events, schedule_events, result_events, audit_events]

# Integration patterns (auto-suggested based on service count and flows)
integration_patterns:
  - name: HTTP REST API
    type: HTTP REST
    description: Synchronous API communication for immediate responses
    recommended_for: [external_requests, service_health_checks]
    
  - name: Event Streaming
    type: "Kafka Events"
    description: Asynchronous event-driven communication between services
    recommended_for: [inter_service_communication, retry_notifications]
    
  - name: Database Operations
    type: "MongoDB Driver"
    description: Direct database operations for data persistence
    recommended_for: [data_storage, audit_logging]
    
  - name: Cache Operations
    type: "Redis Cache"
    description: High-performance caching for configuration and rate limiting
    recommended_for: [configuration_management, rate_limiting]
    
  - name: External Service Calls
    type: HTTP
    description: Outbound calls to external services for retry operations
    recommended_for: [retry_execution, external_integration]

# Participants/Roles (from BPMN analysis)
roles:
  # External participants (type="participant")
  - id: Service-Request-Retry
    name: Service-Request-Retry
    type: participant
    responsibility: Request Initiator
    description: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    
  # Internal services (type="lane")
  - id: Retry-Receiver-Service
    name: Retry-Receiver-Service
    type: lane
    responsibility: Receiver-Request
    system: "[MAPPED TO: Retry Receiver Service]"
    description: ‡∏£‡∏±‡∏ö Request ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Retry
    
  - id: Retry-Scheduler-Service
    name: Retry-Scheduler-Service
    type: lane
    responsibility: produce-retry-request
    system: "[MAPPED TO: Retry Scheduler Service]"
    description: Scheduler-Job, GetList-Retry-Request, update-retry-request, produce-retry-request
    
  - id: Retry-Worker-Service
    name: Retry-Worker-Service
    type: lane
    responsibility: call retry, retry-request and response
    system: "[MAPPED TO: Retry Worker Service]"
    description: retry-request, produce-retry-request_and_response
    
  - id: External-Service
    name: External-Service
    type: lane  # Note: Consider changing to "participant" for external service
    responsibility: receive-retry-request
    system: "[EXTERNAL SYSTEM - Various technologies]"
    description: receive-retry-request from Retry-Worker-Service
    
  # Additional service found in activities
  - id: Retry-Result-Service
    name: Retry-Result-Service
    type: lane
    responsibility: result-retry-request
    system: "[MAPPED TO: Retry Result Service]"
    description: result-retry-request

# Process Activities (enhanced with service mapping references)
activities:
  - id: act0
    role: Service-Request-Retry
    name: Service-Request-Retry
    eventType: start
    description: ServiceRequestRetry, requester, input and want to retry-request
    
  - id: act1
    role: Service-Request-Retry  # Fixed role reference from original
    name: Request-Retry
    eventType: start
    description: ServiceRequestRetry, requester, input and want to retry-request
    service_mapping: Retry Receiver Service  # Will handle initial request
    
  - id: act2
    role: Retry-Receiver-Service
    name: Retry-Receiver-Service
    type: serviceTask
    description: receive-request
    service_mapping: Retry Receiver Service
    
  - id: act3
    role: Retry-Scheduler-Service
    name: Retry-Scheduler-Service
    type: serviceTask
    description: produce-retry-request
    service_mapping: Retry Scheduler Service
    
  - id: act4
    role: Retry-Worker-Service
    name: Retry-Worker-Service
    type: serviceTask
    description: retry-request
    service_mapping: Retry Worker Service
    
  - id: act5
    role: External-Service
    name: External-Service
    type: serviceTask
    description: receive-retry-request
    # No service_mapping as this is external
    
  - id: act6
    role: Retry-Result-Service
    name: Retry-Result-Service
    type: serviceTask
    description: result-retry-request
    service_mapping: Retry Result Service

# Process Flows (from original BPMN)
flows:
  - from: act0
    to: act1
  - from: act1
    to: act2
  - from: act2
    to: act3
  - from: act3
    to: act4
  - from: act4
    to: act5
  - from: act5
    to: act4  # Response back to worker
  - from: act4
    to: act6

# Performance requirements (template - please customize)
performance:
  target_tps: 500
  max_latency: 2000ms
  availability: 99.9%
  retry_strategy: exponential

# Deployment configuration (template - please customize)
deployment:
  environment: "Kubernetes"
  replicas:
    retry_receiver: 2
    retry_scheduler: 1
    retry_worker: 3
    retry_result: 2
  resources:
    cpu_limit: 500m
    memory_limit: 512Mi

# ====================================================================================
# üìã INSTRUCTIONS FOR COMPLETION:
# ====================================================================================
# ‚úÖ PHASE 1 COMPLETE: Template generated successfully!
# 
# üîß NEXT STEPS:
# 1. Replace all "[SELECT: ...]" with your chosen technology
# 2. Replace all "[SPECIFY: ...]" with your specific requirements  
# 3. Verify service mappings match your architecture needs
# 4. Adjust port numbers if needed (ensure uniqueness)
# 5. Review and modify API endpoints as appropriate
# 6. Run sa_004 again to generate the container diagram (Phase 2)
#
# üí° Example completions:
#   backend_framework: "Node.js"                    # Instead of [SELECT: ...]
#   database_primary: "MongoDB"                     # Instead of [SELECT: ...]
#   target_tps: 500                                 # Instead of [SPECIFY: ...]
#   retry_strategy: "exponential"                   # Instead of [SELECT: ...]
#
# üöÄ After completion, re-run this rule to generate your Container Diagram!
# ====================================================================================
