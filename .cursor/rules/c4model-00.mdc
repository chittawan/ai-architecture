# 1️⃣ เริ่มจาก Context Diagram

เป็นภาพรวมสูงสุดของระบบ (System in Context)

แสดงว่า ระบบของเราคุยกับใครบ้าง (External Systems / Users / Clients)

ใช้ Mermaid syntax: graph TD หรือถ้าใช้ C4 style ก็สามารถใช้ C4Context

ตัวอย่าง:
```mermaid
graph LR
    U[User] --> S[Our System]
    S --> P[Payment Gateway]
    S --> C[External CRM System]
    S --> E[Email Service]

```
---
# 2️⃣ ต่อด้วย Container Diagram

แสดงว่า ระบบถูกแบ่งออกเป็นอะไรบ้าง (Web App, Mobile App, Database, API Service ฯลฯ)

Mermaid สามารถใช้ graph TD หรือ C4Container ก็ได้

ตัวอย่าง:
```mermaid
graph LR
    Web[Web Application] --> API[API Service]
    Mobile[Mobile App] --> API
    API --> Auth[Authentication Service]
    API --> Payment[Payment Service]
    API --> Notification[Notification Service]
    API --> DB[(Database)]

```

---
# 3️⃣ แล้วค่อยไปที่ Component Diagram

แบ่ง Container เป็น Component ย่อย

แสดง logic ภายใน, service, module, microservice

ตัวอย่าง:
```mermaid
graph TD
    APIService --> AuthService
    APIService --> PaymentService
    APIService --> NotificationService
```

---
# 4️⃣ Optional: Sequence Diagram / Flow

แสดง flow ของข้อมูลหรือ request-response ระหว่าง component / user / external system

Mermaid syntax: sequenceDiagram

ตัวอย่าง:
```mermaid
sequenceDiagram
    User->>WebApp: Login
    WebApp->>AuthService: Authenticate
    AuthService-->>WebApp: Token
    WebApp-->>User: Access Granted
```